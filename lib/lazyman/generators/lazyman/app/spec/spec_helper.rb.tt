ENV.delete 'HTTP_PROXY' if ENV['HTTP_PROXY']
require 'rubygems' #just in case
require 'rubygems' #for ruby187
require 'erb'
require 'psych'
require 'rspec-rerun'
require 'fuubar'
require 'lazyman' 
require 'active_record'
require 'net/http'
require 'byebug'

Dir["./app/spec/support/**/*.rb"].sort.each {|f|require f}

SAUCE_USERNAME = ""
SAUCE_ACCESS_KEY = ""

<% require 'active_support/all' %>
Lazyman::Initializer.new(File.expand_path(File.join('.')), '<%= name %>')
$:.unshift(File.expand_path File.join('.'))

ActiveRecord::Base.establish_connection(
:adapter  => 'sqlite3',
:database => '/Users/admin/Documents/Aptana Studio 3 Workspace/Misc/SinatraandCas/selfservice.db')

class RuntimeConfiguration < ActiveRecord::Base
  serialize :browsers, Array
  serialize :emails, Array
  serialize :environments, Array
  serialize :tags, Array
end

def remote?
  if ActiveRecord::Base.connection.table_exists? 'runtime_configurations'
    @conf = RuntimeConfiguration.find_by_name("trial")
  end
end

if remote?
  $browsers = @conf.browsers
  $emails = @conf.emails
  $environments = @conf.environments
else
  puts "We're running locally OR we don't have a connection"
  # We're running locally so get our local config
  
  $browsers = $config.browsers
  $emails = $config.emails
end


RSpec.configure do |c|
  c.treat_symbols_as_metadata_keys_with_true_values = true
  c.run_all_when_everything_filtered = true
  c.alias_example_to :test_case
  c.alias_it_should_behave_like_to :include_shared
  
  c.color_enabled = true
  
  # Force expect syntax
  c.expect_with :rspec do |e|
    e.syntax = :expect
  end  

	if ENV['REFRESH']
    # Set everyting to run
    c.filter_run
    
    # User the dry run formatter
    c.add_formatter("DryRunFormatter")
    c.add_formatter("documentation")
    # Make everything fail
    
    c.before(:all) do
        raise 'Fail each test immediately'
    end
    
    # We'll collect our keys into an array
    $KEYS = []
    c.before :each do |x|
      keys = x.example.metadata.each_key.to_a

      keys.each do |k|
       $KEYS.push k  
      end
    end
  
  
    c.after(:suite) {
    r = RuntimeConfiguration.find_by_name("trial")
    
    # Strip out any rspec keys/tags to get just the ones we've added    
    d = [:description_args,:caller,:execution_result,:example_group,:example_group_block]
    d.each {|k| $KEYS.delete(k)}
    r.tags = $KEYS.uniq.to_a
    puts r.tags
    r.save
    #Runtimes.destroy_all
  }
  else
      # Add formatters
      c.add_formatter("Fuubar")
      c.add_formatter("Lazyman::LazymanFormatter")
    
      # If there is a tag value and no one has passed a filter to rspec use the config
      if $config.tags && c.inclusion_filter.empty?
        unless($config.tags.empty?)
          tags = case 
            when String
              $config.tags.lazy_to_hash
            when Hash
              $config.tags
            end #case
          c.filter_run tags
        end 
      end
  end

	def test_data file
		content = ''
		file_path = File.expand_path(File.join('.', 'app', 'test_data', "#{file}.yml"))
		raise "Can not find #{file}.yml" unless File.exists?(file_path)
		File.open(file_path, 'r') do |handle|
			content = handle.read
		end
		Psych.load ERB.new(content).result(binding)
	end
end
